ADICIONAR CLASSES PARA MANIPULAÇÃO
A ideia de navegar por abas, é ter uma lista de itens que controlam a visualização de uma lista de conteúdo. Cada item da lista possui um conteúdo relacionado ao mesmo.

<!-- Primeiro, adicionar classes que irão
facilitar a manipulação dos elementos -->
<ul class="animais-lista js-tabmenu">
  ...
</ul>
<div class="animais-descricao js-tabcontent">
  ...
</div>
COPIAR
SELECIONE OS ITENS
const tabMenu = document.querySelectorAll('.js-tabmenu li');
const tabContent = document.querySelectorAll('.js-tabmenu section');
COPIAR
FUNÇÃO CALLBACK
Recebe índice como parâmetro para ativar uma aba. Sempre que ativar, remova uma classe ativa de todos os outros elementos.


function activeTab(index) {
  tabContent.forEach((content) => {
    content.classList.remove('ativo');
  });
  tabContent[index].classList.add('ativo');
}
COPIAR
ADICIONAR O EVENTO
Neste caso, precisamos passar antes da função anônima no callback, para podermos passar o índice como argumento de activeTab

tabMenu.forEach((itemMenu, index) => {
  itemMenu.addEventListener('click', () => {
    activeTab(index);
  });
});
COPIAR
ASSIM QUE CARREGAR
Adicione uma classe ativa ao primeiro elemento e adicione uma classe js ao html. Assim identificamos se o JavaScript está ativado ou não.

<!-- No head do borwser -->
<script>document.documentElement.className += ' js';</script>
COPIAR
// Verificar se existe elemento em tabContent e tabMenu
if(tabContent.length && tabMenu.length) {
  tabContent[0].classList.add('ativo');
  ...
}
COPIAR
ANIMAÇÃO COM CSS
Animação simples com css, sai de display none para display block.

.js .js-tabcontent section {
  display: none;
}

.js-tabcontent section.ativo {
  display: block !important;
  animation: show .5s forwards;
}

@keyframes show {
  from {
    opacity: 0;
    transform: translate3d(-30px, 0, 0);
  }
  to {
    opacity: 1;
    transform: translate3d(0px, 0, 0);
  }
     
